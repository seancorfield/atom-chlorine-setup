# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings
# * http://flight-manual.atom.io/behind-atom/sections/keymaps-in-depth/
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on macOS and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

# temporary Chlorine key bindings:
'atom-workspace atom-text-editor:not([mini])':

  'ctrl-; b':       'chlorine:tap-block'
  'ctrl-; B':       'chlorine:tap-top-block'
  'ctrl-; c':       'chlorine:break-evaluation'
  'ctrl-; d':       'chlorine:doc-for-var'
  'ctrl-; D':       'chlorine:tap-def-var'
  'ctrl-; e':       'chlorine:disconnect'
  'ctrl-; f':       'chlorine:load-file'
  'ctrl-; j':       'chlorine:tap-javadoc'
  'ctrl-; k':       'chlorine:clear-console'
  'ctrl-; K':       'chlorine:clear-inline-results'
  'ctrl-; n':       'chlorine:tap-ns'
  'ctrl-; r':       'chlorine:tap-remove-ns'
  'ctrl-; R':       'chlorine:tap-reload-all-ns'
  'ctrl-; s':       'chlorine:tap-selection'
  'ctrl-; S':       'chlorine:source-for-var'
  'ctrl-; t':       'chlorine:run-test-for-var'
  'ctrl-; v':       'chlorine:tap-var'
  'ctrl-; x':       'chlorine:run-tests-in-ns'
  'ctrl-; X':       'chlorine:tap-run-side-tests'
  'ctrl-; y':       'chlorine:connect-socket-repl'
  'ctrl-; ?':       'chlorine:tap-doc-var'
  'ctrl-; .':       'chlorine:go-to-var-definition'

  # linter-related
  'alt-; n':        'linter-ui-default:next'

  # jason paredit-type stuff from my init.coffee file
  'alt-; c':        'jason:copy-sexp'
  'alt-; backspace':'jason:delete-sexp'
  'alt-; v':        'jason:paste-sexp'
  'alt-; x':        'jason:cut-sexp'

'atom-text-editor[data-grammar="clojure"]':
  # paredit:
  'enter':          'lisp-paredit:newline'
